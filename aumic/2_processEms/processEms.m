function model = processEms(modeli,famRule,met,emProcess,options)
% required inputs
% - modeli: initial model generated by computeEms
% - famRule: info for em classification into families
%   - each row: each family 
%   - first element (in each row): classification rule
%   - second element (in each row): the reference flux for em normalization 
% - met.biom: name of biomass(defined in the network file)
% - emProcess: further info for em reduction or lumping 
%   - if not needed, type 'emProcess = []'
%   - .how: 'reduce' or 'lump'
%   - .data: flux (or yield) data
%
% outputs
% - model
%   - .x: names of extracellular metabolites 
%   - .r: names of reactions
%   - .z: the full set of ems
%   - .sxz: sx*z
%   - .nfam: the number of em families
%   - .nzInFam: the number of ems in each family
%   - .biom: name of biomass (defined in the network file)

% check inputs
if nargin < 5
    options = [];
    if nargin < 4
        emProcess.how = 'none';
    end
end

if isempty(emProcess.how)
    emProcess.how = 'none';
end

% classify and normalize EMs 
model = classifyEms(modeli,famRule,met);

switch emProcess.how
    case {'reduce','lump'}
        data = emProcess.data;
        z = [];
        for iFam = 1:model.nfam
            zInFam = reduceOrLumpEms(emProcess.how,iFam,model,data,options);
            nzInFam(iFam,1) = size(zInFam,2);
            z = [z zInFam];
        end
        model_ = model;
        model.z = z;
        model.nzInFam = nzInFam;
        model.sxz = model.sx*z;
    case 'none'
        model_ = model;
    otherwise
        error('EM processing method ''%s'' is not supported.',emProcess.how) 
end

save('myPremodels','modeli','model_')