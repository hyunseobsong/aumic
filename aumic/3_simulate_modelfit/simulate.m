function [result,model] = simulate(model,initial,tspan,kinetic,...
    cybernetic,options4sim)
% required inputs
% - model: output generated by processEms
% - initial: initial conditions
%   - .met: initial concentrations of extracellular metabolites
%   - .relEnz: initial relative enzyme level
% - tspan: time span for integration of differential equations
% - kinetic: kinetic parameters 
%   - .kmax: maximum reaction rate constants
%     - first column: parameter name 
%     - second column: parameter value
%   - .K: all other kinetic paramters than kmax
%     - first column: parameter name 
%     - second column: parameter value
% - cybernetic: cybernetic parameters
%     - .al: constitutive enzyme synthesis rates
%     - .be: enzyme degradation rates
%     - .ke: rate constants in inductive enzyme synthesis terms
%     - .metaObj: metabolic objective ('carbon uptake' or 'growth') 
%     - .ncarbon: carbon number for given carbon sources 
%
% outputs
% - result: simulation results
%   - .T: time
%   - .Y: dependent vars (metabolie concentrations and enzyme levels)
%   - .RZ: em throughput fluxes
%   - .U: u variables
%   - .V: v variables
%   - .EREL: relative enzyme levels
%   - .FLUX: flux distributions
% - model: updated with kinetic and cybernetic parameters

met.num = cell2mat(initial.met(:,2));
met.name = initial.met(:,1);
nx = length(model.x);
x0 = zeros(nx,1);
imet_ = [];
for imet = 1:length(met.num)
    imet_ = find(strcmp(met.name{imet},model.x));
    x0(imet_) = met.num(imet);
end

erel0 = initial.relEnz(:);

when2sw = options4sim.when2switch;
when2sw = when2sw(:);
met2sw = options4sim.met2switch;
nsw = length(when2sw);

% check tspan and when2switch
if ~isempty(when2sw)
    if max(when2sw) >= max(tspan) || min(when2sw) <= min(tspan)
        error('when2witch should be within tspan!')
    end
end

% check the size of met2switch
if isempty(when2sw)
%     if ~isempty(met2sw)
%         disp(' ')
%         warning('Your input ''met2switch'' will be neglected.')
%     end
else    
    ncolsw = size(met2sw,2);
    if ncolsw < nsw+1
        error('The column number of ''met2switch'' should be more!');
    elseif ncolsw > nsw+1
        error('The column number of ''met2switch'' should be less!');
    end
    metsw.num = cell2mat(met2sw(:,2:end));
    metsw.name = met2sw(:,1);
    imetsw_ = [];
    iimetsw = [];
    for imetsw = 1:length(metsw.name)
        imetsw_ = find(strcmp(metsw.name{imetsw},model.x));
        iimetsw = [iimetsw;imetsw_];
    end
end

cybernetic = checkSimulationSetting(model,initial,kinetic,cybernetic);

tspan = tspan(:);

% expand when2switch
ileft = 1;
tleft = tspan(1);

T_ = [];
Y_ = [];
RZ_ = [];
U_ = [];
V_ = [];
EREL_ = [];
FLUX_ = [];

vol0 = 1;
y0_ = [x0;erel0;vol0];
for isw = 1:nsw
    iright = min(find(tspan>when2sw(isw))) - 1;
    tright = when2sw(isw);
    tspan_ = unique([tleft;tspan(ileft:iright);tright]);
    [result,model] = solveOdeModel(model,y0_,tspan_,kinetic,cybernetic);
    T_ = [T_;result.T];
    Y_ = [Y_;result.Y];
    RZ_ = [RZ_;result.RZ];
    U_ = [U_;result.U];
    V_ = [V_;result.V];
    EREL_ = [EREL_;result.EREL];
    FLUX_ = [FLUX_;result.FLUX];
    
    ileft = iright+1;
    tleft = tright;
    y0_ = result.Y(end,:)';
    for jsw = 1:length(iimetsw)
        if ~isnan(metsw.num(jsw,isw))
            y0_(iimetsw(jsw)) = metsw.num(jsw,isw);
        end
    end
end
tspan_ = unique([tleft;tspan(ileft:end)]);
% [result,model] = solveOdeModel(model,initial_,tspan_,kinetic,cybernetic);
[result,model] = solveOdeModel(model,y0_,tspan_,kinetic,cybernetic);
T_ = [T_;result.T];
Y_ = [Y_;result.Y];
RZ_ = [RZ_;result.RZ];
U_ = [U_;result.U];
V_ = [V_;result.V];
EREL_ = [EREL_;result.EREL];
FLUX_ = [FLUX_;result.FLUX];

result.T = T_;
result.Y = Y_;
result.RZ = RZ_;
result.U = U_;
result.V = V_;
result.EREL = EREL_;
result.FLUX = FLUX_;

save('myResults','result')
save('myModel','model')
